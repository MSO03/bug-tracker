{"ast":null,"code":"var _jsxFileName = \"/Users/Mishek/bugTracker/src/pages/Home.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport BugList from '../components/BugList';\nimport { v4 as uuidv4 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst LOCAL_STORAGE_KEY = 'bugTracker.bugs';\nexport default function Home() {\n  _s();\n  const [bugs, setBugs] = useState([]);\n  const bugNameRef = useRef();\n  useEffect(() => {\n    const storedBugs = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\n    setBugs(storedBugs);\n  }, []);\n  useEffect(() => {\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(bugs));\n  }, [bugs]);\n  function toggleBug(id) {\n    const newBugs = [...bugs];\n    const bug = newBugs.find(bug => bug.id === id);\n    bug.complete = !bug.complete;\n    setBugs(newBugs);\n  }\n  function handleAddBug(e) {\n    const name = bugNameRef.current.value;\n    if (name === '') return;\n    setBugs(prevBugs => {\n      return [...prevBugs, {\n        id: uuidv4(),\n        name: name,\n        complete: false\n      }];\n    });\n    bugNameRef.current.value = null;\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(BugList, {\n      bugs: bugs,\n      toggleBug: toggleBug\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 2\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      ref: bugNameRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 2\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAddBug,\n      children: \"Add a new Bug \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 2\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\" \", bugs.filter(bug => !bug.complete).length, \" left to do \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 2\n    }, this)]\n  }, void 0, true);\n}\n_s(Home, \"hfIkqc417Lu3jySuIsqsWNaLbvY=\");\n_c = Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useRef","useEffect","BugList","v4","uuidv4","jsxDEV","_jsxDEV","Fragment","_Fragment","LOCAL_STORAGE_KEY","Home","_s","bugs","setBugs","bugNameRef","storedBugs","JSON","parse","localStorage","getItem","setItem","stringify","toggleBug","id","newBugs","bug","find","complete","handleAddBug","e","name","current","value","prevBugs","children","fileName","_jsxFileName","lineNumber","columnNumber","type","ref","onClick","filter","length","_c","$RefreshReg$"],"sources":["/Users/Mishek/bugTracker/src/pages/Home.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport BugList from '../components/BugList';\nimport {v4 as uuidv4} from 'uuid';\n\nconst LOCAL_STORAGE_KEY = 'bugTracker.bugs'\n\nexport default function Home(){\n\tconst [bugs, setBugs] = useState([]);\n\tconst bugNameRef = useRef();\n\n\tuseEffect(() => {\n\t\tconst storedBugs = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\n\t\tsetBugs(storedBugs);\n\t}, [])\n\n\tuseEffect(() => {\n\t\tlocalStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(bugs));\n\t}, [bugs])\n\n\tfunction toggleBug(id){\n\t\tconst newBugs = [...bugs];\n\t\tconst bug = newBugs.find(bug => bug.id === id);\n\t\tbug.complete = !bug.complete;\n\t\tsetBugs(newBugs);\n\t}\n\t\n\n\tfunction handleAddBug(e) {\n\t\tconst name = bugNameRef.current.value;\n\t\tif (name === '') return;\n\t\tsetBugs(prevBugs => {\n\t\t\treturn[...prevBugs, {id :uuidv4(), name:name, complete: false}]\t\n\t\t})\n\t\tbugNameRef.current.value = null;\n\t}\n\n\treturn(\n\t<>\n\t<BugList bugs={bugs} toggleBug={toggleBug} />\n\t<input type=\"text\" ref={bugNameRef}/>\n\t<button onClick={handleAddBug}>Add a new Bug </button>\n\t<div> {bugs.filter(bug => !bug.complete).length} left to do </div>\n\t</>\n\t);\n}\n\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAC1D,OAAOC,OAAO,MAAM,uBAAuB;AAC3C,SAAQC,EAAE,IAAIC,MAAM,QAAO,MAAM;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAElC,MAAMC,iBAAiB,GAAG,iBAAiB;AAE3C,eAAe,SAASC,IAAIA,CAAA,EAAE;EAAAC,EAAA;EAC7B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAMe,UAAU,GAAGd,MAAM,CAAC,CAAC;EAE3BC,SAAS,CAAC,MAAM;IACf,MAAMc,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAACV,iBAAiB,CAAC,CAAC;IACtEI,OAAO,CAACE,UAAU,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC;EAENd,SAAS,CAAC,MAAM;IACfiB,YAAY,CAACE,OAAO,CAACX,iBAAiB,EAAEO,IAAI,CAACK,SAAS,CAACT,IAAI,CAAC,CAAC;EAC9D,CAAC,EAAE,CAACA,IAAI,CAAC,CAAC;EAEV,SAASU,SAASA,CAACC,EAAE,EAAC;IACrB,MAAMC,OAAO,GAAG,CAAC,GAAGZ,IAAI,CAAC;IACzB,MAAMa,GAAG,GAAGD,OAAO,CAACE,IAAI,CAACD,GAAG,IAAIA,GAAG,CAACF,EAAE,KAAKA,EAAE,CAAC;IAC9CE,GAAG,CAACE,QAAQ,GAAG,CAACF,GAAG,CAACE,QAAQ;IAC5Bd,OAAO,CAACW,OAAO,CAAC;EACjB;EAGA,SAASI,YAAYA,CAACC,CAAC,EAAE;IACxB,MAAMC,IAAI,GAAGhB,UAAU,CAACiB,OAAO,CAACC,KAAK;IACrC,IAAIF,IAAI,KAAK,EAAE,EAAE;IACjBjB,OAAO,CAACoB,QAAQ,IAAI;MACnB,OAAM,CAAC,GAAGA,QAAQ,EAAE;QAACV,EAAE,EAAEnB,MAAM,CAAC,CAAC;QAAE0B,IAAI,EAACA,IAAI;QAAEH,QAAQ,EAAE;MAAK,CAAC,CAAC;IAChE,CAAC,CAAC;IACFb,UAAU,CAACiB,OAAO,CAACC,KAAK,GAAG,IAAI;EAChC;EAEA,oBACA1B,OAAA,CAAAE,SAAA;IAAA0B,QAAA,gBACA5B,OAAA,CAACJ,OAAO;MAACU,IAAI,EAAEA,IAAK;MAACU,SAAS,EAAEA;IAAU;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC7ChC,OAAA;MAAOiC,IAAI,EAAC,MAAM;MAACC,GAAG,EAAE1B;IAAW;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eACrChC,OAAA;MAAQmC,OAAO,EAAEb,YAAa;MAAAM,QAAA,EAAC;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACtDhC,OAAA;MAAA4B,QAAA,GAAK,GAAC,EAACtB,IAAI,CAAC8B,MAAM,CAACjB,GAAG,IAAI,CAACA,GAAG,CAACE,QAAQ,CAAC,CAACgB,MAAM,EAAC,cAAY;IAAA;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAAA,eAChE,CAAC;AAEJ;AAAC3B,EAAA,CAtCuBD,IAAI;AAAAkC,EAAA,GAAJlC,IAAI;AAAA,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}